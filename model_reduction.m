% For this script, the CobraToolbox (version 2.32.0) and
% CellNetAnalyzer(2021.1) were used

load PpaGS

FG = 1; % Degree of freedom

protect_met = []; % There are no protected metabolites.

% The following reactions are specified as protected reactions
% (taken from the Central Carbon Metabolism model from Baumann et al. 2010 and Tomàs-Gamisans et al. 2019)

protect_reac = [mfindstr(PpaGS.reacID,'R_PGI');...
    mfindstr(PpaGS.reacID,'R_G6PDH2');...
    mfindstr(PpaGS.reacID,'R_PFK');...
    mfindstr(PpaGS.reacID,'R_FBP');...
    mfindstr(PpaGS.reacID,'R_FBA');...
    mfindstr(PpaGS.reacID,'R_GAPD');...
    mfindstr(PpaGS.reacID,'R_PGK');...
    mfindstr(PpaGS.reacID,'R_PGM');...
    mfindstr(PpaGS.reacID,'R_ENO');...
    mfindstr(PpaGS.reacID,'R_PYK');...
    mfindstr(PpaGS.reacID,'R_ACtp');...
    mfindstr(PpaGS.reacID,'R_PC');...
    mfindstr(PpaGS.reacID,'R_RPE');...
    mfindstr(PpaGS.reacID,'R_RPI');...
    mfindstr(PpaGS.reacID,'R_TKT1');...
    mfindstr(PpaGS.reacID,'R_TKT2');...
    mfindstr(PpaGS.reacID,'R_TALA');...
    mfindstr(PpaGS.reacID,'R_CSm');...
    mfindstr(PpaGS.reacID,'R_ACONTm');...
    mfindstr(PpaGS.reacID,'R_ICDHxm');...
    mfindstr(PpaGS.reacID,'R_ICDHym');...
    mfindstr(PpaGS.reacID,'R_AKGDam');...
    mfindstr(PpaGS.reacID,'R_AKGDbm');...
    mfindstr(PpaGS.reacID,'R_PDHcm');...
    mfindstr(PpaGS.reacID,'R_ME1m');...
    mfindstr(PpaGS.reacID,'R_ME2m');...
    mfindstr(PpaGS.reacID,'R_SUCOASm');...
    mfindstr(PpaGS.reacID,'R_SUCD1m');...
    mfindstr(PpaGS.reacID,'R_FUMm');...
    mfindstr(PpaGS.reacID,'R_MDHm');...
    mfindstr(PpaGS.reacID,'R_ATPM');...
    mfindstr(PpaGS.reacID,'R_MALOAAtp');...
    mfindstr(PpaGS.reacID,'R_SUCCtp');...
    mfindstr(PpaGS.reacID,'R_OAAt2m');...
    mfindstr(PpaGS.reacID,'R_CSp');...
    mfindstr(PpaGS.reacID,'R_ACSp');...
    mfindstr(PpaGS.reacID,'R_MDH');...
    mfindstr(PpaGS.reacID,'R_ICLx');...
    mfindstr(PpaGS.reacID,'R_MALSp');...
    mfindstr(PpaGS.reacID,'R_CITtp');...
    mfindstr(PpaGS.reacID,'R_MALSUCCtm');...
    mfindstr(PpaGS.reacID,'R_AKGMALtm');...
    mfindstr(PpaGS.reacID,'R_ASPTAm');...
    mfindstr(PpaGS.reacID,'R_ASPGLU2m');...
    mfindstr(PpaGS.reacID,'R_GLYCt');...
    mfindstr(PpaGS.reacID,'R_growth');...
    mfindstr(PpaGS.reacID,'R_O2tm');...
    mfindstr(PpaGS.reacID,'R_Ex_biomass');...
    mfindstr(PpaGS.reacID,'R_Ex_co2');...
    mfindstr(PpaGS.reacID,'R_Ex_o2');...
    mfindstr(PpaGS.reacID,'R_Ex_h2o');...
    mfindstr(PpaGS.reacID,'R_Ex_nh4');...
    mfindstr(PpaGS.reacID,'R_Ex_pi');...
    mfindstr(PpaGS.reacID,'R_Ex_h');...
    mfindstr(PpaGS.reacID,'R_Ex_so4');...
    mfindstr(PpaGS.reacID,'R_Ex_glyc');...
    % The following reactions are also added, to account for arabitol and cytosolic acetate production (entry point to the glyoxylate cycle) 
    mfindstr(PpaGS.reacID,'R_PYRDC');...   % Cytosolic Acetate production pathway.
    mfindstr(PpaGS.reacID,'R_ALDD2x');...  % Cytosolic Acetate production pathway.
    mfindstr(PpaGS.reacID,'R_Ex_abt_D')];  % To account for arabitol production.

PpaGS.objFunc = zeros(PpaGS.numr,1);
Bio = mfindstr(PpaGS.reacID,'R_Ex_biomass');
Glyc = mfindstr(PpaGS.reacID,'R_Ex_glyc');

% Protected phenotype: maximal growth (from Tomàs-Gamisans et al. 2019).
protect_func(1).D = zeros(0,PpaGS.numr);
protect_func(1).D(1,Bio) = -1;
protect_func(1).D(2,Glyc)  = 1;
protect_func(1).d = [-0.999*0.094;1.52];

protect_funcb(1).D = zeros(0,PpaGS.numr);
protect_funcb(1).D(1,Bio) = -1;
protect_funcb(1).D(2,Glyc)  = 1;
protect_funcb(1).d = [-0.999*0.0399;0.724];

protect_funcb(2).D = zeros(0,PpaGS.numr);
protect_funcb(2).D(1,Bio) = -1;
protect_funcb(2).D(2,Glyc)  = 1;
protect_funcb(2).d = [-0.999*0.0894;1.453];

protect_funcb(3).D = zeros(0,PpaGS.numr);
protect_funcb(3).D(1,Bio) = -1;
protect_funcb(3).D(2,Glyc)  = 1;
protect_funcb(3).d = [-0.999*0.1616;2.516];

%If no protected functions are wanted:
% protect_func = [];

feas = 1; % To ensure the feasibility of the protected reactions.

rmin = 1; % Minimum remaining reactions of the network

solver = 0; %glpk

comp = 0;  % Without compression

rational = 0; % Do not try rational arithmetics

% Reduction of the network to generate PpaPruned
PpaPruned = CNAreduceMFNetwork(PpaGS,FG,protect_func,protect_met,protect_reac,feas,rmin,solver,comp,rational)


